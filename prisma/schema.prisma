// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // NOTE: sqlite does not work with NextAuth.js
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  plays             Play[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id    String         @id @default(cuid())
  name  String         @unique
  users RolesOnUsers[]
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  dni           Int            @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         RolesOnUsers[]
}

model RolesOnUsers {
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String // relation scalar field (used in the `@relation` attribute above)
  user       User     @relation(fields: [userId], references: [id])
  userId     String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([roleId, userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String  @id @default(cuid())
  name        String
  badgeUrl    String?
  leagueId    String
  league      League  @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")
}

model League {
  id     String @id @default(cuid())
  name   String
  teamId String
  teams  Team[]
}

model Season {
  id        String  @id @default(cuid())
  startYear Int     @unique
  Match     Match[]
}

model Match {
  id          String       @id @default(cuid())
  homeTeamId  String
  homeTeam    Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeamId  String
  awayTeam    Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  seasonId    String
  season      Season       @relation(fields: [seasonId], references: [id])
  isHomeWin   Boolean?
  startTime   DateTime?
  predictions Prediction[]
}

model Prediction {
  id        String  @id @default(cuid())
  matchId   String
  match     Match   @relation(fields: [matchId], references: [id])
  playId    String
  play      Play    @relation(fields: [playId], references: [id])
  isHomeWin Boolean
}

model Play {
  id          String       @id @default(cuid())
  predictions Prediction[]
  accountId   String
  account     Account      @relation(fields: [accountId], references: [id])
  dateCreated DateTime     @default(now())
  price       Decimal      @db.Decimal(10, 2)
}
